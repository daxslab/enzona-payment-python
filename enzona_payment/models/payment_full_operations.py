# coding: utf-8

"""
    PaymentAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enzona_payment.models.amount_operations import AmountOperations  # noqa: F401,E501
from enzona_payment.models.items_operations import ItemsOperations  # noqa: F401,E501
from enzona_payment.models.links_schema import LinksSchema  # noqa: F401,E501


class PaymentFullOperations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_uuid': 'str',
        'currency': 'str',
        'created_at': 'datetime',
        'update_at': 'datetime',
        'status_code': 'int',
        'status_denom': 'str',
        'description': 'str',
        'invoice_number': 'int',
        'merchant_op_id': 'str',
        'terminal_id': 'int',
        'amount': 'AmountOperations',
        'items': 'list[ItemsOperations]',
        'links': 'list[LinksSchema]'
    }

    attribute_map = {
        'transaction_uuid': 'transaction_uuid',
        'currency': 'currency',
        'created_at': 'created_at',
        'update_at': 'update_at',
        'status_code': 'status_code',
        'status_denom': 'status_denom',
        'description': 'description',
        'invoice_number': 'invoice_number',
        'merchant_op_id': 'merchant_op_id',
        'terminal_id': 'terminal_id',
        'amount': 'amount',
        'items': 'items',
        'links': 'links'
    }

    def __init__(self, transaction_uuid=None, currency=None, created_at=None, update_at=None, status_code=None, status_denom=None, description=None, invoice_number=None, merchant_op_id=None, terminal_id=None, amount=None, items=None, links=None):  # noqa: E501
        """PaymentFullOperations - a model defined in Swagger"""  # noqa: E501

        self._transaction_uuid = None
        self._currency = None
        self._created_at = None
        self._update_at = None
        self._status_code = None
        self._status_denom = None
        self._description = None
        self._invoice_number = None
        self._merchant_op_id = None
        self._terminal_id = None
        self._amount = None
        self._items = None
        self._links = None
        self.discriminator = None

        if transaction_uuid is not None:
            self.transaction_uuid = transaction_uuid
        if currency is not None:
            self.currency = currency
        if created_at is not None:
            self.created_at = created_at
        if update_at is not None:
            self.update_at = update_at
        if status_code is not None:
            self.status_code = status_code
        if status_denom is not None:
            self.status_denom = status_denom
        if description is not None:
            self.description = description
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if merchant_op_id is not None:
            self.merchant_op_id = merchant_op_id
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if amount is not None:
            self.amount = amount
        if items is not None:
            self.items = items
        if links is not None:
            self.links = links

    @property
    def transaction_uuid(self):
        """Gets the transaction_uuid of this PaymentFullOperations.  # noqa: E501


        :return: The transaction_uuid of this PaymentFullOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_uuid

    @transaction_uuid.setter
    def transaction_uuid(self, transaction_uuid):
        """Sets the transaction_uuid of this PaymentFullOperations.


        :param transaction_uuid: The transaction_uuid of this PaymentFullOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["f89c79c8dfbd43939cdc43cf47b1ee47"]  # noqa: E501
        # if transaction_uuid not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `transaction_uuid` ({0}), must be one of {1}"  # noqa: E501
        #         .format(transaction_uuid, allowed_values)
        #     )

        self._transaction_uuid = transaction_uuid

    @property
    def currency(self):
        """Gets the currency of this PaymentFullOperations.  # noqa: E501


        :return: The currency of this PaymentFullOperations.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentFullOperations.


        :param currency: The currency of this PaymentFullOperations.  # noqa: E501
        :type: str
        """
        allowed_values = ["CUP", "CUC"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def created_at(self):
        """Gets the created_at of this PaymentFullOperations.  # noqa: E501


        :return: The created_at of this PaymentFullOperations.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PaymentFullOperations.


        :param created_at: The created_at of this PaymentFullOperations.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def update_at(self):
        """Gets the update_at of this PaymentFullOperations.  # noqa: E501


        :return: The update_at of this PaymentFullOperations.  # noqa: E501
        :rtype: datetime
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this PaymentFullOperations.


        :param update_at: The update_at of this PaymentFullOperations.  # noqa: E501
        :type: datetime
        """

        self._update_at = update_at

    @property
    def status_code(self):
        """Gets the status_code of this PaymentFullOperations.  # noqa: E501


        :return: The status_code of this PaymentFullOperations.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PaymentFullOperations.


        :param status_code: The status_code of this PaymentFullOperations.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def status_denom(self):
        """Gets the status_denom of this PaymentFullOperations.  # noqa: E501


        :return: The status_denom of this PaymentFullOperations.  # noqa: E501
        :rtype: str
        """
        return self._status_denom

    @status_denom.setter
    def status_denom(self, status_denom):
        """Sets the status_denom of this PaymentFullOperations.


        :param status_denom: The status_denom of this PaymentFullOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["Pendiente"]  # noqa: E501
        # if status_denom not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `status_denom` ({0}), must be one of {1}"  # noqa: E501
        #         .format(status_denom, allowed_values)
        #     )

        self._status_denom = status_denom

    @property
    def description(self):
        """Gets the description of this PaymentFullOperations.  # noqa: E501


        :return: The description of this PaymentFullOperations.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentFullOperations.


        :param description: The description of this PaymentFullOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["Payment description"]  # noqa: E501
        # if description not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `description` ({0}), must be one of {1}"  # noqa: E501
        #         .format(description, allowed_values)
        #     )

        self._description = description

    @property
    def invoice_number(self):
        """Gets the invoice_number of this PaymentFullOperations.  # noqa: E501


        :return: The invoice_number of this PaymentFullOperations.  # noqa: E501
        :rtype: int
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this PaymentFullOperations.


        :param invoice_number: The invoice_number of this PaymentFullOperations.  # noqa: E501
        :type: int
        """

        self._invoice_number = invoice_number

    @property
    def merchant_op_id(self):
        """Gets the merchant_op_id of this PaymentFullOperations.  # noqa: E501


        :return: The merchant_op_id of this PaymentFullOperations.  # noqa: E501
        :rtype: str
        """
        return self._merchant_op_id

    @merchant_op_id.setter
    def merchant_op_id(self, merchant_op_id):
        """Sets the merchant_op_id of this PaymentFullOperations.


        :param merchant_op_id: The merchant_op_id of this PaymentFullOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["1135"]  # noqa: E501
        # if merchant_op_id not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `merchant_op_id` ({0}), must be one of {1}"  # noqa: E501
        #         .format(merchant_op_id, allowed_values)
        #     )

        self._merchant_op_id = merchant_op_id

    @property
    def terminal_id(self):
        """Gets the terminal_id of this PaymentFullOperations.  # noqa: E501


        :return: The terminal_id of this PaymentFullOperations.  # noqa: E501
        :rtype: int
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this PaymentFullOperations.


        :param terminal_id: The terminal_id of this PaymentFullOperations.  # noqa: E501
        :type: int
        """

        self._terminal_id = terminal_id

    @property
    def amount(self):
        """Gets the amount of this PaymentFullOperations.  # noqa: E501


        :return: The amount of this PaymentFullOperations.  # noqa: E501
        :rtype: AmountOperations
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentFullOperations.


        :param amount: The amount of this PaymentFullOperations.  # noqa: E501
        :type: AmountOperations
        """

        self._amount = amount

    @property
    def items(self):
        """Gets the items of this PaymentFullOperations.  # noqa: E501


        :return: The items of this PaymentFullOperations.  # noqa: E501
        :rtype: list[ItemsOperations]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PaymentFullOperations.


        :param items: The items of this PaymentFullOperations.  # noqa: E501
        :type: list[ItemsOperations]
        """

        self._items = items

    @property
    def links(self):
        """Gets the links of this PaymentFullOperations.  # noqa: E501


        :return: The links of this PaymentFullOperations.  # noqa: E501
        :rtype: list[LinksSchema]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentFullOperations.


        :param links: The links of this PaymentFullOperations.  # noqa: E501
        :type: list[LinksSchema]
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentFullOperations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentFullOperations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
