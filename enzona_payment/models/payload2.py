# coding: utf-8

"""
    PaymentAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enzona_payment.models.payments_amount import PaymentsAmount  # noqa: F401,E501
from enzona_payment.models.payments_items import PaymentsItems  # noqa: F401,E501


class Payload2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'currency': 'str',
        'amount': 'PaymentsAmount',
        'items': 'list[PaymentsItems]',
        'merchant_op_id': 'str',
        'invoice_number': 'str',
        'return_url': 'str',
        'cancel_url': 'str',
        'terminal_id': 'str',
        'buyer_identity_code': 'str'
    }

    attribute_map = {
        'description': 'description',
        'currency': 'currency',
        'amount': 'amount',
        'items': 'items',
        'merchant_op_id': 'merchant_op_id',
        'invoice_number': 'invoice_number',
        'return_url': 'return_url',
        'cancel_url': 'cancel_url',
        'terminal_id': 'terminal_id',
        'buyer_identity_code': 'buyer_identity_code'
    }

    def __init__(self, description=None, currency=None, amount=None, items=None, merchant_op_id=None, invoice_number=None, return_url=None, cancel_url=None, terminal_id=None, buyer_identity_code=None):  # noqa: E501
        """Payload2 - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._currency = None
        self._amount = None
        self._items = None
        self._merchant_op_id = None
        self._invoice_number = None
        self._return_url = None
        self._cancel_url = None
        self._terminal_id = None
        self._buyer_identity_code = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if currency is not None:
            self.currency = currency
        if amount is not None:
            self.amount = amount
        if items is not None:
            self.items = items
        if merchant_op_id is not None:
            self.merchant_op_id = merchant_op_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if return_url is not None:
            self.return_url = return_url
        if cancel_url is not None:
            self.cancel_url = cancel_url
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if buyer_identity_code is not None:
            self.buyer_identity_code = buyer_identity_code

    @property
    def description(self):
        """Gets the description of this Payload2.  # noqa: E501


        :return: The description of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Payload2.


        :param description: The description of this Payload2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def currency(self):
        """Gets the currency of this Payload2.  # noqa: E501


        :return: The currency of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Payload2.


        :param currency: The currency of this Payload2.  # noqa: E501
        :type: str
        """
        allowed_values = ["CUP", "CUC"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this Payload2.  # noqa: E501


        :return: The amount of this Payload2.  # noqa: E501
        :rtype: PaymentsAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payload2.


        :param amount: The amount of this Payload2.  # noqa: E501
        :type: PaymentsAmount
        """

        self._amount = amount

    @property
    def items(self):
        """Gets the items of this Payload2.  # noqa: E501


        :return: The items of this Payload2.  # noqa: E501
        :rtype: list[PaymentsItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Payload2.


        :param items: The items of this Payload2.  # noqa: E501
        :type: list[PaymentsItems]
        """

        self._items = items

    @property
    def merchant_op_id(self):
        """Gets the merchant_op_id of this Payload2.  # noqa: E501


        :return: The merchant_op_id of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._merchant_op_id

    @merchant_op_id.setter
    def merchant_op_id(self, merchant_op_id):
        """Sets the merchant_op_id of this Payload2.


        :param merchant_op_id: The merchant_op_id of this Payload2.  # noqa: E501
        :type: str
        """
        # allowed_values = ["123456789123"]  # noqa: E501
        # if merchant_op_id not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `merchant_op_id` ({0}), must be one of {1}"  # noqa: E501
        #         .format(merchant_op_id, allowed_values)
        #     )

        self._merchant_op_id = merchant_op_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Payload2.  # noqa: E501


        :return: The invoice_number of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Payload2.


        :param invoice_number: The invoice_number of this Payload2.  # noqa: E501
        :type: str
        """
        # allowed_values = ["1212"]  # noqa: E501
        # if invoice_number not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `invoice_number` ({0}), must be one of {1}"  # noqa: E501
        #         .format(invoice_number, allowed_values)
        #     )

        self._invoice_number = invoice_number

    @property
    def return_url(self):
        """Gets the return_url of this Payload2.  # noqa: E501


        :return: The return_url of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this Payload2.


        :param return_url: The return_url of this Payload2.  # noqa: E501
        :type: str
        """
        # allowed_values = ["https://mymerchant.cu/return"]  # noqa: E501
        # if return_url not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `return_url` ({0}), must be one of {1}"  # noqa: E501
        #         .format(return_url, allowed_values)
        #     )

        self._return_url = return_url

    @property
    def cancel_url(self):
        """Gets the cancel_url of this Payload2.  # noqa: E501


        :return: The cancel_url of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this Payload2.


        :param cancel_url: The cancel_url of this Payload2.  # noqa: E501
        :type: str
        """
        # allowed_values = ["https://mymerchant.cu/cancel"]  # noqa: E501
        # if cancel_url not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `cancel_url` ({0}), must be one of {1}"  # noqa: E501
        #         .format(cancel_url, allowed_values)
        #     )

        self._cancel_url = cancel_url

    @property
    def terminal_id(self):
        """Gets the terminal_id of this Payload2.  # noqa: E501


        :return: The terminal_id of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this Payload2.


        :param terminal_id: The terminal_id of this Payload2.  # noqa: E501
        :type: str
        """
        # allowed_values = ["12121"]  # noqa: E501
        # if terminal_id not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `terminal_id` ({0}), must be one of {1}"  # noqa: E501
        #         .format(terminal_id, allowed_values)
        #     )

        self._terminal_id = terminal_id

    @property
    def buyer_identity_code(self):
        """Gets the buyer_identity_code of this Payload2.  # noqa: E501


        :return: The buyer_identity_code of this Payload2.  # noqa: E501
        :rtype: str
        """
        return self._buyer_identity_code

    @buyer_identity_code.setter
    def buyer_identity_code(self, buyer_identity_code):
        """Sets the buyer_identity_code of this Payload2.


        :param buyer_identity_code: The buyer_identity_code of this Payload2.  # noqa: E501
        :type: str
        """

        self._buyer_identity_code = buyer_identity_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payload2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payload2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
