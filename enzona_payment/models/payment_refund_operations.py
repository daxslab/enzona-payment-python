# coding: utf-8

"""
    PaymentAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enzona_payment.models.items_operations import ItemsOperations  # noqa: F401,E501
from enzona_payment.models.payment_refund_operations_amount import PaymentRefundOperationsAmount  # noqa: F401,E501


class PaymentRefundOperations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_uuid': 'str',
        'status_code': 'str',
        'status_denom': 'str',
        'transaction_created_at': 'str',
        'transaction_updated_at': 'str',
        'transaction_signature': 'str',
        'amount': 'PaymentRefundOperationsAmount',
        'currency': 'str',
        'transaction_description': 'str',
        'transaction_denom': 'str',
        'transaction_code': 'str',
        'terminal_id': 'str',
        'invoice_number': 'str',
        'username': 'str',
        'name': 'str',
        'lastname': 'str',
        'avatar': 'str',
        'items': 'list[ItemsOperations]'
    }

    attribute_map = {
        'transaction_uuid': 'transaction_uuid',
        'status_code': 'status_code',
        'status_denom': 'status_denom',
        'transaction_created_at': 'transaction_created_at',
        'transaction_updated_at': 'transaction_updated_at',
        'transaction_signature': 'transaction_signature',
        'amount': 'amount',
        'currency': 'currency',
        'transaction_description': 'transaction_description',
        'transaction_denom': 'transaction_denom',
        'transaction_code': 'transaction_code',
        'terminal_id': 'terminal_id',
        'invoice_number': 'invoice_number',
        'username': 'username',
        'name': 'name',
        'lastname': 'lastname',
        'avatar': 'avatar',
        'items': 'items'
    }

    def __init__(self, transaction_uuid=None, status_code=None, status_denom=None, transaction_created_at=None, transaction_updated_at=None, transaction_signature=None, amount=None, currency=None, transaction_description=None, transaction_denom=None, transaction_code=None, terminal_id=None, invoice_number=None, username=None, name=None, lastname=None, avatar=None, items=None):  # noqa: E501
        """PaymentRefundOperations - a model defined in Swagger"""  # noqa: E501

        self._transaction_uuid = None
        self._status_code = None
        self._status_denom = None
        self._transaction_created_at = None
        self._transaction_updated_at = None
        self._transaction_signature = None
        self._amount = None
        self._currency = None
        self._transaction_description = None
        self._transaction_denom = None
        self._transaction_code = None
        self._terminal_id = None
        self._invoice_number = None
        self._username = None
        self._name = None
        self._lastname = None
        self._avatar = None
        self._items = None
        self.discriminator = None

        if transaction_uuid is not None:
            self.transaction_uuid = transaction_uuid
        if status_code is not None:
            self.status_code = status_code
        if status_denom is not None:
            self.status_denom = status_denom
        if transaction_created_at is not None:
            self.transaction_created_at = transaction_created_at
        if transaction_updated_at is not None:
            self.transaction_updated_at = transaction_updated_at
        if transaction_signature is not None:
            self.transaction_signature = transaction_signature
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if transaction_description is not None:
            self.transaction_description = transaction_description
        if transaction_denom is not None:
            self.transaction_denom = transaction_denom
        if transaction_code is not None:
            self.transaction_code = transaction_code
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if username is not None:
            self.username = username
        if name is not None:
            self.name = name
        if lastname is not None:
            self.lastname = lastname
        if avatar is not None:
            self.avatar = avatar
        if items is not None:
            self.items = items

    @property
    def transaction_uuid(self):
        """Gets the transaction_uuid of this PaymentRefundOperations.  # noqa: E501


        :return: The transaction_uuid of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_uuid

    @transaction_uuid.setter
    def transaction_uuid(self, transaction_uuid):
        """Sets the transaction_uuid of this PaymentRefundOperations.


        :param transaction_uuid: The transaction_uuid of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """

        self._transaction_uuid = transaction_uuid

    @property
    def status_code(self):
        """Gets the status_code of this PaymentRefundOperations.  # noqa: E501


        :return: The status_code of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PaymentRefundOperations.


        :param status_code: The status_code of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def status_denom(self):
        """Gets the status_denom of this PaymentRefundOperations.  # noqa: E501


        :return: The status_denom of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._status_denom

    @status_denom.setter
    def status_denom(self, status_denom):
        """Sets the status_denom of this PaymentRefundOperations.


        :param status_denom: The status_denom of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """

        self._status_denom = status_denom

    @property
    def transaction_created_at(self):
        """Gets the transaction_created_at of this PaymentRefundOperations.  # noqa: E501


        :return: The transaction_created_at of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_created_at

    @transaction_created_at.setter
    def transaction_created_at(self, transaction_created_at):
        """Sets the transaction_created_at of this PaymentRefundOperations.


        :param transaction_created_at: The transaction_created_at of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """

        self._transaction_created_at = transaction_created_at

    @property
    def transaction_updated_at(self):
        """Gets the transaction_updated_at of this PaymentRefundOperations.  # noqa: E501


        :return: The transaction_updated_at of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_updated_at

    @transaction_updated_at.setter
    def transaction_updated_at(self, transaction_updated_at):
        """Sets the transaction_updated_at of this PaymentRefundOperations.


        :param transaction_updated_at: The transaction_updated_at of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """

        self._transaction_updated_at = transaction_updated_at

    @property
    def transaction_signature(self):
        """Gets the transaction_signature of this PaymentRefundOperations.  # noqa: E501


        :return: The transaction_signature of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_signature

    @transaction_signature.setter
    def transaction_signature(self, transaction_signature):
        """Sets the transaction_signature of this PaymentRefundOperations.


        :param transaction_signature: The transaction_signature of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """

        self._transaction_signature = transaction_signature

    @property
    def amount(self):
        """Gets the amount of this PaymentRefundOperations.  # noqa: E501


        :return: The amount of this PaymentRefundOperations.  # noqa: E501
        :rtype: PaymentRefundOperationsAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRefundOperations.


        :param amount: The amount of this PaymentRefundOperations.  # noqa: E501
        :type: PaymentRefundOperationsAmount
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this PaymentRefundOperations.  # noqa: E501


        :return: The currency of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentRefundOperations.


        :param currency: The currency of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["CUP"]  # noqa: E501
        # if currency not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
        #         .format(currency, allowed_values)
        #     )

        self._currency = currency

    @property
    def transaction_description(self):
        """Gets the transaction_description of this PaymentRefundOperations.  # noqa: E501


        :return: The transaction_description of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this PaymentRefundOperations.


        :param transaction_description: The transaction_description of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """

        self._transaction_description = transaction_description

    @property
    def transaction_denom(self):
        """Gets the transaction_denom of this PaymentRefundOperations.  # noqa: E501


        :return: The transaction_denom of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_denom

    @transaction_denom.setter
    def transaction_denom(self, transaction_denom):
        """Sets the transaction_denom of this PaymentRefundOperations.


        :param transaction_denom: The transaction_denom of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["Devolución Total"]  # noqa: E501
        # if transaction_denom not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `transaction_denom` ({0}), must be one of {1}"  # noqa: E501
        #         .format(transaction_denom, allowed_values)
        #     )

        self._transaction_denom = transaction_denom

    @property
    def transaction_code(self):
        """Gets the transaction_code of this PaymentRefundOperations.  # noqa: E501


        :return: The transaction_code of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this PaymentRefundOperations.


        :param transaction_code: The transaction_code of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["2000"]  # noqa: E501
        # if transaction_code not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `transaction_code` ({0}), must be one of {1}"  # noqa: E501
        #         .format(transaction_code, allowed_values)
        #     )

        self._transaction_code = transaction_code

    @property
    def terminal_id(self):
        """Gets the terminal_id of this PaymentRefundOperations.  # noqa: E501


        :return: The terminal_id of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this PaymentRefundOperations.


        :param terminal_id: The terminal_id of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["0.01"]  # noqa: E501
        # if terminal_id not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `terminal_id` ({0}), must be one of {1}"  # noqa: E501
        #         .format(terminal_id, allowed_values)
        #     )

        self._terminal_id = terminal_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this PaymentRefundOperations.  # noqa: E501


        :return: The invoice_number of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this PaymentRefundOperations.


        :param invoice_number: The invoice_number of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["0.01"]  # noqa: E501
        # if invoice_number not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `invoice_number` ({0}), must be one of {1}"  # noqa: E501
        #         .format(invoice_number, allowed_values)
        #     )

        self._invoice_number = invoice_number

    @property
    def username(self):
        """Gets the username of this PaymentRefundOperations.  # noqa: E501


        :return: The username of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PaymentRefundOperations.


        :param username: The username of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["dmiller"]  # noqa: E501
        # if username not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `username` ({0}), must be one of {1}"  # noqa: E501
        #         .format(username, allowed_values)
        #     )

        self._username = username

    @property
    def name(self):
        """Gets the name of this PaymentRefundOperations.  # noqa: E501


        :return: The name of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentRefundOperations.


        :param name: The name of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["David"]  # noqa: E501
        # if name not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
        #         .format(name, allowed_values)
        #     )

        self._name = name

    @property
    def lastname(self):
        """Gets the lastname of this PaymentRefundOperations.  # noqa: E501


        :return: The lastname of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this PaymentRefundOperations.


        :param lastname: The lastname of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["Miller"]  # noqa: E501
        # if lastname not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `lastname` ({0}), must be one of {1}"  # noqa: E501
        #         .format(lastname, allowed_values)
        #     )

        self._lastname = lastname

    @property
    def avatar(self):
        """Gets the avatar of this PaymentRefundOperations.  # noqa: E501


        :return: The avatar of this PaymentRefundOperations.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this PaymentRefundOperations.


        :param avatar: The avatar of this PaymentRefundOperations.  # noqa: E501
        :type: str
        """
        # allowed_values = ["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"]  # noqa: E501
        # if avatar not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `avatar` ({0}), must be one of {1}"  # noqa: E501
        #         .format(avatar, allowed_values)
        #     )

        self._avatar = avatar

    @property
    def items(self):
        """Gets the items of this PaymentRefundOperations.  # noqa: E501


        :return: The items of this PaymentRefundOperations.  # noqa: E501
        :rtype: list[ItemsOperations]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PaymentRefundOperations.


        :param items: The items of this PaymentRefundOperations.  # noqa: E501
        :type: list[ItemsOperations]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentRefundOperations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentRefundOperations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
