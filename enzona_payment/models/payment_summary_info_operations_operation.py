# coding: utf-8

"""
    PaymentAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enzona_payment.models.payment_summary_info_operations_operation_amount import PaymentSummaryInfoOperationsOperationAmount  # noqa: F401,E501
from enzona_payment.models.payment_summary_info_operations_operation_bank_debit_details import PaymentSummaryInfoOperationsOperationBankDebitDetails  # noqa: F401,E501


class PaymentSummaryInfoOperationsOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'PaymentSummaryInfoOperationsOperationAmount',
        'bank_debit_details': 'PaymentSummaryInfoOperationsOperationBankDebitDetails',
        'description': 'str',
        'merchant_op_id': 'str',
        'invoice_id': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'bank_debit_details': 'bank_debit_details',
        'description': 'description',
        'merchant_op_id': 'merchant_op_id',
        'invoice_id': 'invoice_id'
    }

    def __init__(self, amount=None, bank_debit_details=None, description=None, merchant_op_id=None, invoice_id=None):  # noqa: E501
        """PaymentSummaryInfoOperationsOperation - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._bank_debit_details = None
        self._description = None
        self._merchant_op_id = None
        self._invoice_id = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if bank_debit_details is not None:
            self.bank_debit_details = bank_debit_details
        if description is not None:
            self.description = description
        if merchant_op_id is not None:
            self.merchant_op_id = merchant_op_id
        if invoice_id is not None:
            self.invoice_id = invoice_id

    @property
    def amount(self):
        """Gets the amount of this PaymentSummaryInfoOperationsOperation.  # noqa: E501


        :return: The amount of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :rtype: PaymentSummaryInfoOperationsOperationAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentSummaryInfoOperationsOperation.


        :param amount: The amount of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :type: PaymentSummaryInfoOperationsOperationAmount
        """

        self._amount = amount

    @property
    def bank_debit_details(self):
        """Gets the bank_debit_details of this PaymentSummaryInfoOperationsOperation.  # noqa: E501


        :return: The bank_debit_details of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :rtype: PaymentSummaryInfoOperationsOperationBankDebitDetails
        """
        return self._bank_debit_details

    @bank_debit_details.setter
    def bank_debit_details(self, bank_debit_details):
        """Sets the bank_debit_details of this PaymentSummaryInfoOperationsOperation.


        :param bank_debit_details: The bank_debit_details of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :type: PaymentSummaryInfoOperationsOperationBankDebitDetails
        """

        self._bank_debit_details = bank_debit_details

    @property
    def description(self):
        """Gets the description of this PaymentSummaryInfoOperationsOperation.  # noqa: E501


        :return: The description of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentSummaryInfoOperationsOperation.


        :param description: The description of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def merchant_op_id(self):
        """Gets the merchant_op_id of this PaymentSummaryInfoOperationsOperation.  # noqa: E501


        :return: The merchant_op_id of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :rtype: str
        """
        return self._merchant_op_id

    @merchant_op_id.setter
    def merchant_op_id(self, merchant_op_id):
        """Sets the merchant_op_id of this PaymentSummaryInfoOperationsOperation.


        :param merchant_op_id: The merchant_op_id of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :type: str
        """

        self._merchant_op_id = merchant_op_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this PaymentSummaryInfoOperationsOperation.  # noqa: E501


        :return: The invoice_id of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this PaymentSummaryInfoOperationsOperation.


        :param invoice_id: The invoice_id of this PaymentSummaryInfoOperationsOperation.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentSummaryInfoOperationsOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSummaryInfoOperationsOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
