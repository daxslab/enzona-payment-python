# coding: utf-8

"""
    PaymentAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentSummaryInfoOperationsOperationBankDebitDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trans_amount': 'str',
        'currency': 'str',
        'exchange_rate': 'int',
        'discount': 'int'
    }

    attribute_map = {
        'trans_amount': 'trans_amount',
        'currency': 'currency',
        'exchange_rate': 'exchange_rate',
        'discount': 'discount'
    }

    def __init__(self, trans_amount=None, currency=None, exchange_rate=None, discount=None):  # noqa: E501
        """PaymentSummaryInfoOperationsOperationBankDebitDetails - a model defined in Swagger"""  # noqa: E501

        self._trans_amount = None
        self._currency = None
        self._exchange_rate = None
        self._discount = None
        self.discriminator = None

        if trans_amount is not None:
            self.trans_amount = trans_amount
        if currency is not None:
            self.currency = currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if discount is not None:
            self.discount = discount

    @property
    def trans_amount(self):
        """Gets the trans_amount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501


        :return: The trans_amount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :rtype: str
        """
        return self._trans_amount

    @trans_amount.setter
    def trans_amount(self, trans_amount):
        """Sets the trans_amount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.


        :param trans_amount: The trans_amount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :type: str
        """

        self._trans_amount = trans_amount

    @property
    def currency(self):
        """Gets the currency of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501


        :return: The currency of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentSummaryInfoOperationsOperationBankDebitDetails.


        :param currency: The currency of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["CUP", "CUC"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501


        :return: The exchange_rate of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :rtype: int
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this PaymentSummaryInfoOperationsOperationBankDebitDetails.


        :param exchange_rate: The exchange_rate of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :type: int
        """

        self._exchange_rate = exchange_rate

    @property
    def discount(self):
        """Gets the discount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501


        :return: The discount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.


        :param discount: The discount of this PaymentSummaryInfoOperationsOperationBankDebitDetails.  # noqa: E501
        :type: int
        """

        self._discount = discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentSummaryInfoOperationsOperationBankDebitDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSummaryInfoOperationsOperationBankDebitDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
